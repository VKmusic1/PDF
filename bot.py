import os
import io
import logging
import asyncio

import fitz
import pdfplumber
import pandas as pd
from PIL import Image
from docx import Document
from docx.image.exceptions import UnrecognizedImageError

from telegram import (
    Update,
    InputFile,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
)
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters,
)

# ---------------- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ----------------

TOKEN = os.getenv("TOKEN")
if not TOKEN:
    raise RuntimeError("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è TOKEN –Ω–µ –∑–∞–¥–∞–Ω–∞")

# ---------------- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ----------------

logging.basicConfig(
    format="%(asctime)s %(levelname)s: %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# ---------------- PDF-—É—Ç–∏–ª–∏—Ç—ã ----------------

def extract_pdf_elements(path: str):
    doc = fitz.open(path)
    elems = []
    for page in doc:
        txt = page.get_text().strip()
        if txt:
            elems.append(("text", txt))
        for img in page.get_images(full=True):
            data = doc.extract_image(img[0])["image"]
            elems.append(("img", data))
    doc.close()
    return elems

def save_text_to_txt(elems, out_path):
    with open(out_path, "w", encoding="utf-8") as f:
        for typ, content in elems:
            if typ == "text":
                f.write(content + "\n\n")

def convert_to_word(elems, out_path):
    docx = Document()
    for typ, content in elems:
        if typ == "text":
            docx.add_paragraph(content)
        else:
            bio = io.BytesIO(content)
            bio.name = "image.png"
            try:
                docx.add_picture(bio)
            except UnrecognizedImageError:
                try:
                    im = Image.open(io.BytesIO(content))
                    buf = io.BytesIO()
                    im.save(buf, format="PNG")
                    buf.name = "image.png"
                    buf.seek(0)
                    docx.add_picture(buf)
                except Exception:
                    logger.warning("–ü—Ä–æ–ø—É—â–µ–Ω–∞ –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –∫–∞—Ä—Ç–∏–Ω–∫–∞")
    docx.save(out_path)

# ---------------- Telegram-—Ö–µ–Ω–¥–ª–µ—Ä—ã ----------------

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å PDF-—Ñ–∞–π–ª, –∏ —è –ø—Ä–µ–¥–ª–æ–∂—É –≤–∞—Ä–∏–∞–Ω—Ç—ã.")

async def handle_pdf(update: Update, context: ContextTypes.DEFAULT_TYPE):
    doc = update.message.document
    if not doc or doc.mime_type != "application/pdf":
        return await update.message.reply_text("–ù—É–∂–µ–Ω PDF-—Ñ–∞–π–ª.")
    await update.message.reply_text("‚è≥ –°–∫–∞—á–∏–≤–∞—é –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é‚Ä¶")
    tgfile = await doc.get_file()
    path = f"/tmp/{doc.file_unique_id}.pdf"
    await tgfile.download_to_drive(path)

    elems = extract_pdf_elements(path)
    context.user_data["pdf_path"] = path
    context.user_data["elems"] = elems

    kb = [
        [InlineKeyboardButton("Word: —Ç–µ–∫—Å—Ç+–∫–∞—Ä—Ç–∏–Ω–∫–∏ üìÑ", "cb_word")],
        [InlineKeyboardButton("TXT: —Ç–µ–∫—Å—Ç üìÑ", "cb_txt")],
        [InlineKeyboardButton("Excel: —Ç–∞–±–ª–∏—Ü—ã üìä", "cb_tables")],
        [InlineKeyboardButton("–ß–∞—Ç: —Ç–µ–∫—Å—Ç üìù", "cb_text")],
        [InlineKeyboardButton("–ß–∞—Ç: —Ç–µ–∫—Å—Ç+–∫–∞—Ä—Ç–∏–Ω–∫–∏ üñºÔ∏èüìù", "cb_all")],
        [InlineKeyboardButton("–ù–æ–≤—ã–π PDF üîÑ", "cb_new")],
    ]
    await update.message.reply_text("–í—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç:", reply_markup=InlineKeyboardMarkup(kb))

# –ü—Ä–æ–≥—Ä–µ—Å—Å‚Äê–±–∞—Ä –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ Word
async def cb_word(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    path = context.user_data.get("pdf_path")
    elems = context.user_data.get("elems", [])
    if not path or not elems:
        return await update.callback_query.edit_message_text("–°–Ω–∞—á–∞–ª–∞ PDF.")

    msg = await context.bot.send_message(update.effective_chat.id, "‚è≥ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è: 0%")
    start = asyncio.get_event_loop().time()

    async def progress_task():
        while True:
            pct = min(int((asyncio.get_event_loop().time() - start) / 4), 99)
            try:
                await context.bot.edit_message_text(
                    f"‚è≥ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è: {pct}%", update.effective_chat.id, msg.message_id
                )
            except:
                pass
            if pct >= 99:
                break
            await asyncio.sleep(5)

    task = asyncio.create_task(progress_task())

    out = f"/tmp/{update.effective_user.id}_layout.docx"
    convert_to_word(elems, out)

    task.cancel()
    try:
        await context.bot.edit_message_text(
            "‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!", update.effective_chat.id, msg.message_id
        )
    except:
        pass

    with open(out, "rb") as f:
        await context.bot.send_document(
            update.effective_chat.id, InputFile(f, filename="converted.docx")
        )

async def cb_txt(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    elems = context.user_data.get("elems", [])
    if not elems:
        return await context.bot.send_message(update.effective_chat.id, "–°–Ω–∞—á–∞–ª–∞ PDF.")
    out = f"/tmp/{update.effective_user.id}.txt"
    save_text_to_txt(elems, out)
    with open(out, "rb") as f:
        await context.bot.send_document(
            update.effective_chat.id, InputFile(f, filename="converted.txt")
        )

async def cb_tables(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    path = context.user_data.get("pdf_path")
    if not path:
        return await context.bot.send_message(update.effective_chat.id, "–°–Ω–∞—á–∞–ª–∞ PDF.")
    tables = []
    with pdfplumber.open(path) as pdf:
        for p in pdf.pages:
            for tbl in p.extract_tables():
                if tbl and len(tbl) > 1:
                    df = pd.DataFrame(tbl[1:], columns=tbl[0])
                    tables.append(df)
    if not tables:
        return await context.bot.send_message(update.effective_chat.id, "–¢–∞–±–ª–∏—Ü –Ω–µ—Ç.")
    out = f"/tmp/{update.effective_user.id}_tables.xlsx"
    with pd.ExcelWriter(out, engine="openpyxl") as w:
        for i, df in enumerate(tables, 1):
            df.to_excel(w, sheet_name=f"–¢–∞–±{i}", index=False)
    with open(out, "rb") as f:
        await context.bot.send_document(
            update.effective_chat.id, InputFile(f, filename="tables.xlsx")
        )

async def cb_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    elems = context.user_data.get("elems", [])
    for typ, content in elems:
        if typ == "text":
            for i in range(0, len(content), 4096):
                await context.bot.send_message(update.effective_chat.id, content[i:i+4096])

async def cb_all(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    sent = set()
    elems = context.user_data.get("elems", [])
    for typ, content in elems:
        if typ == "text":
            for i in range(0, len(content), 4096):
                await context.bot.send_message(update.effective_chat.id, content[i:i+4096])
        else:
            h = hash(content)
            if h in sent:
                continue
            sent.add(h)
            bio = io.BytesIO(content)
            bio.name = "img.png"
            await context.bot.send_photo(update.effective_chat.id, photo=bio)

async def cb_new(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    context.user_data.clear()
    await context.bot.send_message(update.effective_chat.id, "–ü—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–≤—ã–π PDF ‚Üí")

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º
app_builder = ApplicationBuilder().token(TOKEN).build()
app_builder.add_handler(CommandHandler("start", start))
app_builder.add_handler(MessageHandler(filters.Document.PDF, handle_pdf))
app_builder.add_handler(CallbackQueryHandler(cb_word,   pattern="cb_word"))
app_builder.add_handler(CallbackQueryHandler(cb_txt,    pattern="cb_txt"))
app_builder.add_handler(CallbackQueryHandler(cb_tables, pattern="cb_tables"))
app_builder.add_handler(CallbackQueryHandler(cb_text,   pattern="cb_text"))
app_builder.add_handler(CallbackQueryHandler(cb_all,    pattern="cb_all"))
app_builder.add_handler(CallbackQueryHandler(cb_new,    pattern="cb_new"))

if __name__ == "__main__":
    logger.info("–ó–∞–ø—É—Å–∫–∞–µ–º polling‚Ä¶")
    app_builder.run_polling()
