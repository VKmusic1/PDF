import os
import io
import logging
import asyncio
import fitz                  # PyMuPDF
import pdfplumber
import pandas as pd
from flask import Flask, request
from telegram import (
    Update,
    InputFile,
    InlineKeyboardButton,
    InlineKeyboardMarkup
)
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters
)
from docx import Document
import threading
import requests

# ---------------------- 1. –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è ----------------------
TOKEN = os.getenv("TOKEN")
if not TOKEN:
    raise RuntimeError("Environment variable TOKEN is required")

HOST = os.getenv("RENDER_EXTERNAL_HOSTNAME")
if not HOST:
    raise RuntimeError("Environment variable RENDER_EXTERNAL_HOSTNAME is required")

PORT = int(os.getenv("PORT", "10000"))
WEBHOOK_URL = f"https://{HOST}/{TOKEN}"

# ---------------------- 2. –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ----------------------
logging.basicConfig(format="%(asctime)s %(levelname)s: %(message)s", level=logging.INFO)
logger = logging.getLogger(__name__)

# ---------------------- 3. –°–æ–∑–¥–∞—ë–º Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ ----------------------
app_flask = Flask(__name__)

# ---------------------- 4. –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å PDF ----------------------
def extract_pdf_elements(path: str):
    """
    –û—Ç–∫—Ä—ã–≤–∞–µ—Ç PDF —á–µ—Ä–µ–∑ PyMuPDF, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤:
    - ('text', —Å—Ç—Ä–æ–∫–∞ —Ç–µ–∫—Å—Ç–∞)
    - ('img', bytes –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è)
    """
    doc = fitz.open(path)
    elements = []
    for page in doc:
        text = page.get_text().strip()
        if text:
            elements.append(("text", text))
        for img in page.get_images(full=True):
            xref = img[0]
            data = doc.extract_image(xref)["image"]
            elements.append(("img", data))
    doc.close()
    return elements

def convert_to_word(elements, out_path: str):
    """
    –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ DOCX:
    - —Ç–µ–∫—Å—Ç ‚Üí –ø–∞—Ä–∞–≥—Ä–∞—Ñ—ã
    - –∫–∞—Ä—Ç–∏–Ω–∫–∏ ‚Üí –≤—Å—Ç–∞–≤–ª—è–µ—Ç –≤ –¥–æ–∫—É–º–µ–Ω—Ç
    """
    docx = Document()
    for typ, content in elements:
        if typ == "text":
            docx.add_paragraph(content)
        else:
            bio = io.BytesIO(content)
            bio.name = "image.png"
            docx.add_picture(bio)
    docx.save(out_path)

# ---------------------- 5. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Application ----------------------
telegram_app = (
    Application.builder()
    .token(TOKEN)
    .connection_pool_size(100)
    .build()
)
# –¢–∞–π–º-–∞—É—Ç—ã –¥–ª—è HTTP-–∑–∞–ø—Ä–æ—Å–æ–≤ –≤–Ω—É—Ç—Ä–∏ PTB (–Ω–µ –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è –≤ send_*)
telegram_app.request_kwargs = {
    "read_timeout": 60,
    "connect_timeout": 20
}

# ---------------------- 6. –¢–µ–ª–µ–≥—Ä–∞–º–Ω—ã–µ —Ö—ç–Ω–¥–ª–µ—Ä—ã ----------------------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    /start
    """
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å PDF-—Ñ–∞–π–ª, –∏ —è –ø—Ä–µ–¥–ª–æ–∂—É –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏–∑–≤–ª–µ—á–µ–Ω–∏—è.")

async def handle_pdf(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ü—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ PDF:
     - —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–≥–æ –≤–æ /tmp
     - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —à–µ—Å—Ç—å –∫–Ω–æ–ø–æ–∫ –≤—ã–±–æ—Ä–∞ (–∫–æ—Ä–æ—Ç–∫–∏–µ –ø–æ–¥–ø–∏—Å–∏ —Å —ç–º–æ–¥–∑–∏)
    """
    logger.info("–ü–æ–ª—É—á–µ–Ω –¥–æ–∫—É–º–µ–Ω—Ç –æ—Ç %s", update.effective_user.id)
    doc = update.message.document
    if not doc or doc.mime_type != "application/pdf":
        return await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å PDF-—Ñ–∞–π–ª.")
    file = await doc.get_file()
    path = f"/tmp/{doc.file_unique_id}.pdf"
    await file.download_to_drive(path)
    context.user_data["pdf_path"] = path

    keyboard = [
        [InlineKeyboardButton("Word: —Ç–µ–∫—Å—Ç+–∫–∞—Ä—Ç–∏–Ω–∫–∏ üìÑ", callback_data="cb_word_all")],
        [InlineKeyboardButton("TXT: —Ç–µ–∫—Å—Ç üìÑ",            callback_data="cb_txt")],
        [InlineKeyboardButton("Excel: —Ç–∞–±–ª–∏—Ü—ã üìä",         callback_data="cb_tables")],
        [InlineKeyboardButton("–ß–∞—Ç: —Ç–µ–∫—Å—Ç üìù",             callback_data="cb_text_only")],
        [InlineKeyboardButton("–ß–∞—Ç: —Ç–µ–∫—Å—Ç+–∫–∞—Ä—Ç–∏–Ω–∫–∏ üñºÔ∏èüìù", callback_data="cb_chat_all")],
        [InlineKeyboardButton("–ù–æ–≤—ã–π PDF üîÑ",              callback_data="cb_new_pdf")],
    ]
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç —Ä–∞–±–æ—Ç—ã —Å —ç—Ç–∏–º PDF:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def cb_text_only(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç –≤ —á–∞—Ç (–ø–æ –ø–æ—Ä—Ü–∏—è–º), –±–µ–∑ —É–¥–∞–ª–µ–Ω–∏—è –∫–Ω–æ–ø–æ–∫.
    """
    user = update.effective_user.id
    logger.info("Callback cb_text_only –æ—Ç %s", user)
    await update.callback_query.answer()
    path = context.user_data.get("pdf_path")
    if not path:
        return await context.bot.send_message(update.effective_chat.id, "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –û—Ç–ø—Ä–∞–≤—å –Ω–æ–≤—ã–π PDF.")
    elements = extract_pdf_elements(path)
    text_only = [c for t, c in elements if t == "text"]
    if not text_only:
        return await context.bot.send_message(update.effective_chat.id, "–í PDF –Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞.")
    for block in text_only:
        for i in range(0, len(block), 4096):
            await context.bot.send_message(update.effective_chat.id, block[i:i+4096])
            await asyncio.sleep(0.1)

async def cb_chat_all(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç –∏ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –≤ —ç—Ç–æ—Ç –∂–µ —á–∞—Ç, –ø–æ –ø–æ—Ä—è–¥–∫—É.
    """
    user = update.effective_user.id
    logger.info("Callback cb_chat_all –æ—Ç %s", user)
    await update.callback_query.answer()
    path = context.user_data.get("pdf_path")
    if not path:
        return await context.bot.send_message(update.effective_chat.id, "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –û—Ç–ø—Ä–∞–≤—å –Ω–æ–≤—ã–π PDF.")
    elements = extract_pdf_elements(path)
    if not elements:
        return await context.bot.send_message(update.effective_chat.id, "–í PDF –Ω–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç–∞.")
    sent_hashes = set()
    for typ, content in elements:
        if typ == "text":
            for i in range(0, len(content), 4096):
                await context.bot.send_message(update.effective_chat.id, content[i:i+4096])
                await asyncio.sleep(0.1)
        else:
            h = hash(content)
            if h in sent_hashes:
                continue
            sent_hashes.add(h)
            bio = io.BytesIO(content)
            bio.name = "image.png"
            await context.bot.send_photo(update.effective_chat.id, bio)
            await asyncio.sleep(0.1)

async def cb_word_all(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤–µ—Å—å PDF (—Ç–µ–∫—Å—Ç+–∫–∞—Ä—Ç–∏–Ω–∫–∏) –≤ Word (.docx) –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º.
    """
    user = update.effective_user.id
    logger.info("Callback cb_word_all –æ—Ç %s", user)
    await update.callback_query.answer()
    path = context.user_data.get("pdf_path")
    if not path:
        return await context.bot.send_message(update.effective_chat.id, "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –û—Ç–ø—Ä–∞–≤—å –Ω–æ–≤—ã–π PDF.")
    elements = extract_pdf_elements(path)
    if not elements:
        return await context.bot.send_message(update.effective_chat.id, "–í PDF –Ω–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç–∞.")
    out = f"/tmp/{user}_all.docx"
    convert_to_word(elements, out)
    with open(out, "rb") as f:
        await context.bot.send_document(
            update.effective_chat.id,
            document=InputFile(f, filename="full_converted.docx")
        )

async def cb_txt(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –°–æ–±–∏—Ä–∞–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç –≤ .txt –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º.
    """
    user = update.effective_user.id
    logger.info("Callback cb_txt –æ—Ç %s", user)
    await update.callback_query.answer()
    path = context.user_data.get("pdf_path")
    if not path:
        return await context.bot.send_message(update.effective_chat.id, "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –û—Ç–ø—Ä–∞–≤—å –Ω–æ–≤—ã–π PDF.")
    elements = extract_pdf_elements(path)
    text_only = [c for t, c in elements if t == "text"]
    if not text_only:
        return await context.bot.send_message(update.effective_chat.id, "–í PDF –Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞.")
    all_text = "\n\n".join(text_only)
    out_path = f"/tmp/{user}.txt"
    with open(out_path, "w", encoding="utf-8") as f:
        f.write(all_text)
    with open(out_path, "rb") as f:
        await context.bot.send_document(
            update.effective_chat.id,
            document=InputFile(f, filename="full_converted.txt")
        )

async def cb_tables(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—ã —á–µ—Ä–µ–∑ pdfplumber, —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç .xlsx –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç.
    """
    user = update.effective_user.id
    logger.info("Callback cb_tables –æ—Ç %s", user)
    await update.callback_query.answer()
    path = context.user_data.get("pdf_path")
    if not path:
        return await context.bot.send_message(update.effective_chat.id, "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –û—Ç–ø—Ä–∞–≤—å –Ω–æ–≤—ã–π PDF.")
    all_tables = []
    with pdfplumber.open(path) as pdf:
        for page_number, page in enumerate(pdf.pages, start=1):
            tables = page.extract_tables()
            for tbl_idx, table in enumerate(tables, start=1):
                if not table or len(table) < 2:
                    continue
                df = pd.DataFrame(table[1:], columns=table[0])
                sheet_name = f"–°—Ç—Ä{page_number}_–¢–∞–±{tbl_idx}"
                all_tables.append((sheet_name, df))
    if not all_tables:
        return await context.bot.send_message(update.effective_chat.id, "–í PDF –Ω–µ—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–µ–º—ã—Ö —Ç–∞–±–ª–∏—Ü.")
    excel_path = f"/tmp/{user}_tables.xlsx"
    with pd.ExcelWriter(excel_path, engine="openpyxl") as writer:
        for sheet_name, df in all_tables:
            safe_name = sheet_name[:31]  # –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ Excel: 31 —Å–∏–º–≤–æ–ª
            df.to_excel(writer, sheet_name=safe_name, index=False)
    with open(excel_path, "rb") as f:
        await context.bot.send_document(
            update.effective_chat.id,
            document=InputFile(f, filename="tables.xlsx")
        )

async def cb_new_pdf(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ù–æ–≤—ã–π PDF ‚Äì –æ—á–∏—â–∞–µ–º user_data –∏ –ø—Ä–æ—Å–∏–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–Ω–æ–≤–æ.
    """
    user = update.effective_user.id
    logger.info("Callback cb_new_pdf –æ—Ç %s", user)
    await update.callback_query.answer()
    context.user_data.clear()
    await context.bot.send_message(update.effective_chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π PDF-—Ñ–∞–π–ª.")

# ---------------------- 7. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤ ----------------------
telegram_app.add_handler(CommandHandler("start", start))
telegram_app.add_handler(MessageHandler(filters.Document.PDF, handle_pdf))
telegram_app.add_handler(CallbackQueryHandler(cb_text_only,   pattern="cb_text_only"))
telegram_app.add_handler(CallbackQueryHandler(cb_chat_all,    pattern="cb_chat_all"))
telegram_app.add_handler(CallbackQueryHandler(cb_word_all,    pattern="cb_word_all"))
telegram_app.add_handler(CallbackQueryHandler(cb_txt,         pattern="cb_txt"))
telegram_app.add_handler(CallbackQueryHandler(cb_tables,      pattern="cb_tables"))
telegram_app.add_handler(CallbackQueryHandler(cb_new_pdf,     pattern="cb_new_pdf"))

# ---------------------- 8. Flask-–º–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è –≤–µ–±—Ö—É–∫–∞ –∏ ping ----------------------
@app_flask.route(f"/{TOKEN}", methods=["POST"])
def webhook():
    """
    Telegram –±—É–¥–µ—Ç —Å–ª–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—é–¥–∞ (POST). 
    –î–µ–∫–æ–¥–∏—Ä—É–µ–º Update –∏ –æ—Ç–¥–∞–µ–º –≤ PTB.
    """
    update = Update.de_json(request.get_json(force=True), telegram_app.bot)
    asyncio.run(telegram_app.process_update(update))
    return "ok"

@app_flask.route("/ping", methods=["GET"])
def ping():
    """
    –û—Ç–≤–µ—á–∞–µ–º ¬´pong¬ª. PingWin –∏–ª–∏ –ª—é–±–æ–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –±—É–¥–µ—Ç 
    –æ–ø—Ä–∞—à–∏–≤–∞—Ç—å —ç—Ç–æ—Ç URL, —á—Ç–æ–±—ã –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –∑–∞—Å—ã–ø–∞–ª.
    """
    return "pong"

# ---------------------- 9. –°—Ç–∞—Ä—Ç—É–µ–º Flask ----------------------
if __name__ == "__main__":
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook (–æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ)
    resp = requests.post(
        f"https://api.telegram.org/bot{TOKEN}/setWebhook",
        data={"url": WEBHOOK_URL}
    )
    logger.info("–£—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ webhook: %s ‚Üí %s", resp.status_code, WEBHOOK_URL)
    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask
    logger.info("–ó–∞–ø—É—Å–∫–∞–µ–º Flask –Ω–∞ –ø–æ—Ä—Ç—É %s", PORT)
    app_flask.run(host="0.0.0.0", port=PORT)
