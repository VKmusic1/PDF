import os
import io
import logging
import asyncio
import fitz                  # PyMuPDF
import pdfplumber
import pandas as pd
from telegram import (
    Update,
    InputFile,
    InlineKeyboardButton,
    InlineKeyboardMarkup
)
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters
)
from docx import Document

# ---------------------- 1. –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è ----------------------
TOKEN = os.getenv("TOKEN")
if not TOKEN:
    raise RuntimeError("Environment variable TOKEN is required")

HOST = os.getenv("RENDER_EXTERNAL_HOSTNAME")
if not HOST:
    raise RuntimeError("Environment variable RENDER_EXTERNAL_HOSTNAME is required")

PORT = int(os.getenv("PORT", "10000"))
WEBHOOK_URL = f"https://{HOST}/{TOKEN}"

# ---------------------- 2. –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ----------------------
logging.basicConfig(format="%(asctime)s %(levelname)s: %(message)s", level=logging.INFO)
logger = logging.getLogger(__name__)

# ---------------------- 3. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Application ----------------------
telegram_app = (
    Application.builder()
    .token(TOKEN)
    .connection_pool_size(100)
    .build()
)
# –¢–∞–π–º-–∞—É—Ç—ã –¥–ª—è send_document (–≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –≤—ã–∑–æ–≤—ã –∏–¥—É—Ç –±–µ–∑ timeout)
telegram_app.request_kwargs = {
    "read_timeout": 60,
    "connect_timeout": 20
}

# ---------------------- 4. –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å PDF ----------------------
def extract_pdf_elements(path: str):
    """
    –û—Ç–∫—Ä—ã–≤–∞–µ—Ç PDF —á–µ—Ä–µ–∑ PyMuPDF, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤:
    ('text', —Å—Ç—Ä–æ–∫–∞ —Ç–µ–∫—Å—Ç–∞) –∏–ª–∏ ('img', bytes_–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è).
    """
    doc = fitz.open(path)
    elements = []
    for page in doc:
        text = page.get_text().strip()
        if text:
            elements.append(("text", text))
        for img in page.get_images(full=True):
            xref = img[0]
            data = doc.extract_image(xref)["image"]
            elements.append(("img", data))
    doc.close()
    return elements

async def send_elements(update: Update, context: ContextTypes.DEFAULT_TYPE, elements):
    """
    –ü—Ä–æ—Ö–æ–¥–∏—Ç –ø–æ —Å–ø–∏—Å–∫—É —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç:
     - –∫–∞–∂–¥—ã–π —Ç–µ–∫—Å—Ç –ø–æ 4096 —Å–∏–º–≤–æ–ª–æ–≤
     - –∫–∞–∂–¥—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É
    –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –≤—ã–≤–æ–¥–∏—Ç —á–µ—Ç—ã—Ä–µ –∫–Ω–æ–ø–∫–∏:
     ¬´–°–∫–∞—á–∞—Ç—å –≤ Word¬ª, ¬´–°–∫–∞—á–∞—Ç—å –≤ TXT¬ª, ¬´–°–∫–∞—á–∞—Ç—å —Ç–∞–±–ª–∏—Ü—ã¬ª, ¬´–ù–æ–≤—ã–π PDF¬ª
    –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ ¬´–ß—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º, –Ω–∞–∂–º–∏—Ç–µ /start¬ª.
    """
    sent = set()
    chat_id = update.effective_chat.id

    for typ, content in elements:
        if typ == "text":
            text = content
            for i in range(0, len(text), 4096):
                await context.bot.send_message(chat_id, text[i:i+4096])
                await asyncio.sleep(0.1)
        else:
            h = hash(content)
            if h in sent:
                continue
            sent.add(h)
            bio = io.BytesIO(content)
            bio.name = "image.png"
            await context.bot.send_photo(chat_id, photo=bio)
            await asyncio.sleep(0.1)

    keyboard = [
        [InlineKeyboardButton("–°–∫–∞—á–∞—Ç—å –≤ Word üíæ", callback_data="download_word")],
        [InlineKeyboardButton("–°–∫–∞—á–∞—Ç—å –≤ TXT üìÑ", callback_data="download_txt")],
        [InlineKeyboardButton("–°–∫–∞—á–∞—Ç—å —Ç–∞–±–ª–∏—Ü—ã üìä", callback_data="download_tables")],
        [InlineKeyboardButton("–ù–æ–≤—ã–π PDF üîñ", callback_data="new_pdf")]
    ]
    await context.bot.send_message(
        chat_id,
        "–ì–æ—Ç–æ–≤–æ!",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    await context.bot.send_message(chat_id, "–ß—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º, –Ω–∞–∂–º–∏—Ç–µ /start")

def convert_to_word(elements, out_path: str):
    """
    –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ DOCX:
    - —Ç–µ–∫—Å—Ç -> –ø–∞—Ä–∞–≥—Ä–∞—Ñ—ã
    - –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è -> –≤—Å—Ç–∞–≤–ª—è–µ—Ç –≤ –¥–æ–∫—É–º–µ–Ω—Ç
    """
    docx = Document()
    for typ, content in elements:
        if typ == "text":
            docx.add_paragraph(content)
        else:
            bio = io.BytesIO(content)
            bio.name = "image.png"
            docx.add_picture(bio)
    docx.save(out_path)

# ---------------------- 5. –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ callback ----------------------

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    /start
    """
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å PDF-—Ñ–∞–π–ª.")

async def handle_pdf(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ü—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ PDF:
     - —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ñ–∞–π–ª –≤–æ /tmp
     - –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –∫–Ω–æ–ø–∫—É ¬´–¢–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç¬ª –∏ ¬´–¢–µ–∫—Å—Ç + –∫–∞—Ä—Ç–∏–Ω–∫–∏¬ª
    """
    logger.info("–ü–æ–ª—É—á–µ–Ω –¥–æ–∫—É–º–µ–Ω—Ç –æ—Ç %s", update.effective_user.id)
    doc = update.message.document
    if not doc or doc.mime_type != "application/pdf":
        return await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ PDF-—Ñ–∞–π–ª.")
    file = await doc.get_file()
    path = f"/tmp/{doc.file_unique_id}.pdf"
    await file.download_to_drive(path)
    context.user_data["pdf_path"] = path

    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –∏–∑–≤–ª–µ—á—å –∏–∑ PDF:",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("–¢–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç", callback_data="only_text")],
            [InlineKeyboardButton("–¢–µ–∫—Å—Ç + –∫–∞—Ä—Ç–∏–Ω–∫–∏", callback_data="text_images")]
        ])
    )

async def only_text_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ ¬´–¢–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç¬ª:
     - –∏–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –±–ª–æ–∫–∏
     - –≤—ã–∑—ã–≤–∞–µ—Ç send_elements()
    """
    logger.info("Callback only_text –æ—Ç %s", update.effective_user.id)
    await update.callback_query.answer()
    path = context.user_data.get("pdf_path")
    if not path:
        return await update.callback_query.edit_message_text("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    elements = extract_pdf_elements(path)
    text_only = [(t, c) for t, c in elements if t == "text"]
    context.user_data["elements"] = text_only
    await send_elements(update, context, text_only)

async def text_images_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ ¬´–¢–µ–∫—Å—Ç + –∫–∞—Ä—Ç–∏–Ω–∫–∏¬ª:
     - –∏–∑–≤–ª–µ–∫–∞–µ—Ç –∏ —Ç–µ–∫—Å—Ç, –∏ –∫–∞—Ä—Ç–∏–Ω–∫–∏
     - –≤—ã–∑—ã–≤–∞–µ—Ç send_elements()
    """
    logger.info("Callback text_images –æ—Ç %s", update.effective_user.id)
    await update.callback_query.answer()
    path = context.user_data.get("pdf_path")
    if not path:
        return await update.callback_query.edit_message_text("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    elements = extract_pdf_elements(path)
    context.user_data["elements"] = elements
    await send_elements(update, context, elements)

async def download_txt_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ ¬´–°–∫–∞—á–∞—Ç—å –≤ TXT¬ª:
     - —Å–æ–±–∏—Ä–∞–µ—Ç –≤–µ—Å—å —Ç–µ–∫—Å—Ç
     - –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –≤ /tmp/USER_ID.txt
     - –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —á–µ—Ä–µ–∑ send_document(timeout=60)
    """
    logger.info("Callback download_txt –æ—Ç %s", update.effective_user.id)
    await update.callback_query.answer()
    elements = context.user_data.get("elements", [])
    if not elements:
        return await update.callback_query.edit_message_text("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏.")
    all_text = ""
    for typ, content in elements:
        if typ == "text":
            all_text += content + "\n\n"
    if not all_text:
        return await update.callback_query.edit_message_text("–í PDF –Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞.")
    out_path = f"/tmp/{update.effective_user.id}.txt"
    with open(out_path, "w", encoding="utf-8") as f:
        f.write(all_text)
    with open(out_path, "rb") as f:
        await context.bot.send_document(
            update.effective_chat.id,
            document=InputFile(f, filename="converted.txt"),
            timeout=60
        )

async def download_word_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ ¬´–°–∫–∞—á–∞—Ç—å –≤ Word¬ª:
     - –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —ç–ª–µ–º–µ–Ω—Ç—ã –≤ DOCX
     - –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —á–µ—Ä–µ–∑ send_document(timeout=60)
    """
    logger.info("Callback download_word –æ—Ç %s", update.effective_user.id)
    await update.callback_query.answer()
    elements = context.user_data.get("elements", [])
    if not elements:
        return await update.callback_query.edit_message_text("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏.")
    out = f"/tmp/{update.effective_user.id}.docx"
    convert_to_word(elements, out)
    with open(out, "rb") as f:
        await context.bot.send_document(
            update.effective_chat.id,
            document=InputFile(f, filename="converted.docx"),
            timeout=60
        )

async def download_tables_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ ¬´–°–∫–∞—á–∞—Ç—å —Ç–∞–±–ª–∏—Ü—ã¬ª:
     - –∏–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—ã —á–µ—Ä–µ–∑ pdfplumber,
     - –∫–ª–∞–¥—ë—Ç –∏—Ö –≤ Excel (openpyxl),
     - –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —á–µ—Ä–µ–∑ send_document(timeout=60)
    """
    logger.info("Callback download_tables –æ—Ç %s", update.effective_user.id)
    await update.callback_query.answer()
    path = context.user_data.get("pdf_path")
    if not path:
        return await update.callback_query.edit_message_text("PDF –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    all_tables = []
    with pdfplumber.open(path) as pdf:
        for page_number, page in enumerate(pdf.pages, start=1):
            tables = page.extract_tables()
            for tbl_idx, table in enumerate(tables, start=1):
                if not table or len(table) < 2:
                    continue
                df = pd.DataFrame(table[1:], columns=table[0])
                sheet_name = f"–°—Ç—Ä{page_number}_–¢–∞–±{tbl_idx}"
                all_tables.append((sheet_name, df))

    if not all_tables:
        return await update.callback_query.edit_message_text("–í PDF –Ω–µ—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–µ–º—ã—Ö —Ç–∞–±–ª–∏—Ü.")
    excel_path = f"/tmp/{update.effective_user.id}_tables.xlsx"
    with pd.ExcelWriter(excel_path, engine="openpyxl") as writer:
        for sheet_name, df in all_tables:
            safe_name = sheet_name[:31]  # –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ Excel: 31 —Å–∏–º–≤–æ–ª
            df.to_excel(writer, sheet_name=safe_name, index=False)
    with open(excel_path, "rb") as f:
        await context.bot.send_document(
            update.effective_chat.id,
            document=InputFile(f, filename="tables.xlsx"),
            timeout=60
        )

async def new_pdf_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ ¬´–ù–æ–≤—ã–π PDF¬ª:
     - –æ—á–∏—â–∞–µ—Ç user_data,
     - –ø—Ä–æ—Å–∏—Ç –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤—ã–π —Ñ–∞–π–ª.
    """
    logger.info("Callback new_pdf –æ—Ç %s", update.effective_user.id)
    await update.callback_query.answer()
    context.user_data.clear()
    await context.bot.send_message(update.effective_chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π PDF-—Ñ–∞–π–ª.")

# ---------------------- 6. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤ ----------------------
telegram_app.add_handler(CommandHandler("start", start))
telegram_app.add_handler(MessageHandler(filters.Document.PDF, handle_pdf))
telegram_app.add_handler(CallbackQueryHandler(only_text_callback, pattern="only_text"))
telegram_app.add_handler(CallbackQueryHandler(text_images_callback, pattern="text_images"))
telegram_app.add_handler(CallbackQueryHandler(download_word_callback, pattern="download_word"))
telegram_app.add_handler(CallbackQueryHandler(download_txt_callback, pattern="download_txt"))
telegram_app.add_handler(CallbackQueryHandler(download_tables_callback, pattern="download_tables"))
telegram_app.add_handler(CallbackQueryHandler(new_pdf_callback, pattern="new_pdf"))

# ---------------------- 7. –ó–∞–ø—É—Å–∫ webhook ----------------------
if __name__ == "__main__":
    logger.info(f"Setting webhook to {WEBHOOK_URL}")
    telegram_app.run_webhook(
        listen="0.0.0.0",
        port=PORT,
        url_path=TOKEN,
        webhook_url=WEBHOOK_URL
    )
