import os
import io
import logging
import asyncio
import fitz  # PyMuPDF
from telegram import Update, InputFile, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters
)
from docx import Document

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.getenv("TOKEN")
if not TOKEN:
    raise RuntimeError("Environment variable TOKEN is required")

HOST = os.getenv("RENDER_EXTERNAL_HOSTNAME")
if not HOST:
    raise RuntimeError("Environment variable RENDER_EXTERNAL_HOSTNAME is required")

PORT = int(os.getenv("PORT", "10000"))
WEBHOOK_URL = f"https://{HOST}/{TOKEN}"

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(format="%(asctime)s %(levelname)s: %(message)s", level=logging.INFO)
logger = logging.getLogger(__name__)

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Application ===
telegram_app = (
    Application.builder()
    .token(TOKEN)
    .connection_pool_size(100)
    .build()
)
# –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º-–∞—É—Ç—ã –ø–æ—Å–ª–µ —Å–±–æ—Ä–∫–∏
telegram_app.request_kwargs = {
    "read_timeout": 60,
    "connect_timeout": 20
}

# –§—É–Ω–∫—Ü–∏—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ PDF
def extract_pdf_elements(path: str):
    doc = fitz.open(path)
    elements = []
    for page in doc:
        text = page.get_text().strip()
        if text:
            elements.append(("text", text))
        for img in page.get_images(full=True):
            xref = img[0]
            data = doc.extract_image(xref)["image"]
            elements.append(("img", data))
    doc.close()
    return elements

# –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ (—Ç–µ–∫—Å—Ç + –∫–∞—Ä—Ç–∏–Ω–∫–∏)
async def send_elements(update: Update, context: ContextTypes.DEFAULT_TYPE, elements):
    sent = set()
    chat_id = update.effective_chat.id
    for typ, content in elements:
        if typ == "text":
            text = content
            for i in range(0, len(text), 4096):
                await context.bot.send_message(chat_id, text[i:i+4096])
                await asyncio.sleep(0.1)
        else:
            h = hash(content)
            if h in sent:
                continue
            sent.add(h)
            bio = io.BytesIO(content)
            bio.name = "image.png"
            await context.bot.send_photo(chat_id, photo=bio)
            await asyncio.sleep(0.1)
    # –ö–Ω–æ–ø–∫–∏ –ø–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
    keyboard = [
        [InlineKeyboardButton("–°–∫–∞—á–∞—Ç—å –≤ Word üíæ", callback_data="download_word")],
        [InlineKeyboardButton("–°–∫–∞—á–∞—Ç—å –≤ TXT üìÑ", callback_data="download_txt")],
        [InlineKeyboardButton("–ù–æ–≤—ã–π PDF üîñ", callback_data="new_pdf")]
    ]
    await context.bot.send_message(chat_id, "–ì–æ—Ç–æ–≤–æ!", reply_markup=InlineKeyboardMarkup(keyboard))
    # –ü–æ–¥–ø–∏—Å—å
    await context.bot.send_message(chat_id, "–ß—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º, –Ω–∞–∂–º–∏—Ç–µ /start")

# –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ Word
def convert_to_word(elements, out_path: str):
    docx = Document()
    for typ, content in elements:
        if typ == "text":
            docx.add_paragraph(content)
        else:
            bio = io.BytesIO(content)
            bio.name = "image.png"
            docx.add_picture(bio)
    docx.save(out_path)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è TXT
async def download_txt_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    elements = context.user_data.get("elements", [])
    if not elements:
        return await update.callback_query.edit_message_text("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏.")
    all_text = ""
    for typ, content in elements:
        if typ == "text":
            all_text += content + "\n\n"
    if not all_text:
        return await update.callback_query.edit_message_text("–í PDF –Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞.")
    out_path = f"/tmp/{update.effective_user.id}.txt"
    with open(out_path, "w", encoding="utf-8") as f:
        f.write(all_text)
    with open(out_path, "rb") as f:
        await context.bot.send_document(
            update.effective_chat.id,
            document=InputFile(f, filename="converted.txt")
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è Word
async def download_word_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    elements = context.user_data.get("elements", [])
    if not elements:
        return await update.callback_query.edit_message_text("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏.")
    out = f"/tmp/{update.effective_user.id}.docx"
    convert_to_word(elements, out)
    with open(out, "rb") as f:
        await context.bot.send_document(update.effective_chat.id, InputFile(f, filename="converted.docx"))

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å PDF-—Ñ–∞–π–ª.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ PDF
async def handle_pdf(update: Update, context: ContextTypes.DEFAULT_TYPE):
    doc = update.message.document
    if doc.mime_type != "application/pdf":
        return await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ PDF.")
    file = await doc.get_file()
    path = f"/tmp/{doc.file_unique_id}.pdf"
    await file.download_to_drive(path)
    context.user_data["pdf_path"] = path
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –∏–∑–≤–ª–µ—á—å:",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("–¢–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç", callback_data="only_text")],
            [InlineKeyboardButton("–¢–µ–∫—Å—Ç + –∫–∞—Ä—Ç–∏–Ω–∫–∏", callback_data="text_images")]
        ])
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ ¬´–¢–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç¬ª
async def only_text_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    path = context.user_data.get("pdf_path")
    if not path:
        return await update.callback_query.edit_message_text("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    elements = extract_pdf_elements(path)
    text_only = [(t, c) for t, c in elements if t == "text"]
    context.user_data["elements"] = text_only
    await send_elements(update, context, text_only)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ ¬´–¢–µ–∫—Å—Ç + –∫–∞—Ä—Ç–∏–Ω–∫–∏¬ª
async def text_images_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    path = context.user_data.get("pdf_path")
    if not path:
        return await update.callback_query.edit_message_text("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    elements = extract_pdf_elements(path)
    context.user_data["elements"] = elements
    await send_elements(update, context, elements)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ ¬´–ù–æ–≤—ã–π PDF¬ª
async def new_pdf_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    context.user_data.clear()
    await context.bot.send_message(update.effective_chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π PDF-—Ñ–∞–π–ª.")

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤
telegram_app.add_handler(CommandHandler("start", start))
telegram_app.add_handler(MessageHandler(filters.Document.PDF, handle_pdf))
telegram_app.add_handler(CallbackQueryHandler(only_text_callback, pattern="only_text"))
telegram_app.add_handler(CallbackQueryHandler(text_images_callback, pattern="text_images"))
telegram_app.add_handler(CallbackQueryHandler(download_word_callback, pattern="download_word"))
telegram_app.add_handler(CallbackQueryHandler(download_txt_callback, pattern="download_txt"))
telegram_app.add_handler(CallbackQueryHandler(new_pdf_callback, pattern="new_pdf"))

# –ó–∞–ø—É—Å–∫ webhook
if __name__ == "__main__":
    logger.info(f"Setting webhook to {WEBHOOK_URL}")
    telegram_app.run_webhook(
        listen="0.0.0.0",
        port=PORT,
        url_path=TOKEN,
        webhook_url=WEBHOOK_URL
    )
