import os
import io
import logging
import asyncio
import threading

import fitz                  # PyMuPDF
import pdfplumber
import pandas as pd
from flask import Flask, request
from telegram import Update, InputFile, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters
)
from docx import Document
import requests  # –Ω—É–∂–Ω–æ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook

# ======================= 1. –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è =======================

TOKEN = os.getenv("TOKEN")
if not TOKEN:
    raise RuntimeError("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è TOKEN –Ω–µ –∑–∞–¥–∞–Ω–∞")

HOST = os.getenv("RENDER_EXTERNAL_HOSTNAME")
if not HOST:
    raise RuntimeError("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è RENDER_EXTERNAL_HOSTNAME –Ω–µ –∑–∞–¥–∞–Ω–∞")

PORT = int(os.getenv("PORT", "10000"))
WEBHOOK_URL = f"https://{HOST}/{TOKEN}"

# ======================= 2. –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ =======================

logging.basicConfig(format="%(asctime)s %(levelname)s: %(message)s", level=logging.INFO)
logger = logging.getLogger(__name__)

# ======================= 3. Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ =======================

app = Flask(__name__)

# ======================= 4. –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º asyncio-loop =======================
#
# –ú—ã —Å–æ–∑–¥–∞—ë–º –æ–¥–∏–Ω-singleton loop –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –µ–≥–æ –≤ —Ñ–æ–Ω–µ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ.
# –í Flask-—Ö–µ–Ω–¥–ª–µ—Ä–∞—Ö –º—ã –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –±—É–¥–µ–º –≤—ã–∑—ã–≤–∞—Ç—å asyncio.get_event_loop().
# –í–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ –≤—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º run_coroutine_threadsafe(...).
#

# 4.1. –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π event loop
telegram_loop = asyncio.new_event_loop()

# 4.2. –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å—Ç–∞—Ä—Ç–∞ —ç—Ç–æ–≥–æ loop –≤ —Ñ–æ–Ω–æ–≤–æ–º –ø–æ—Ç–æ–∫–µ
def start_loop(loop: asyncio.AbstractEventLoop):
    asyncio.set_event_loop(loop)
    loop.run_forever()

# 4.3. –ó–∞–ø—É—Å–∫–∞–µ–º loop –≤ —Ñ–æ–Ω–æ–≤–æ–º –¥–µ–º–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –ø–æ—Ç–æ–∫–µ (daemon=True)
threading.Thread(target=start_loop, args=(telegram_loop,), daemon=True).start()

# ======================= 5. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Application =======================

telegram_app = (
    Application.builder()
    .token(TOKEN)
    .connection_pool_size(100)
    .build()
)

# –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º-–∞—É—Ç—ã HTTP-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è PTB (—á—Ç–æ–±—ã –ø—Ä–∏ –º–µ–¥–ª–µ–Ω–Ω—ã—Ö —Å–µ—Ç—è—Ö –Ω–µ —Ä–æ–Ω—è–ª–æ—Å—å)
telegram_app.request_kwargs = {
    "read_timeout": 60,
    "connect_timeout": 20
}

# 5.1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ (await Application.initialize()) —É–∂–µ –≤ —Ñ–æ–Ω–æ–≤–æ–º loop-–µ
#      –ß—Ç–æ–±—ã PTB-Application ¬´–æ—Å–≤–æ–∏–ª–∞—Å—å¬ª –∑–∞—Ä–∞–Ω–µ–µ –∏ –º–æ–∂–Ω–æ –±—ã–ª–æ —Å—Ä–∞–∑—É –ø—Ä–∏–Ω–∏–º–∞—Ç—å updates.
future_init = asyncio.run_coroutine_threadsafe(telegram_app.initialize(), telegram_loop)
# –î–æ–∂–¥—ë–º—Å—è, –ø–æ–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è (–∏–Ω–∞—á–µ process_update() –±—É–¥–µ—Ç —Ä—É–≥–∞—Ç—å—Å—è –Ω–∞ ¬´–Ω–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ¬ª –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ).
try:
    future_init.result(timeout=15)  # –ø–æ–¥–æ–∂–¥—ë–º –¥–æ 15 —Å–µ–∫—É–Ω–¥
    logger.info("‚úî Telegram Application initialized")
except Exception as e:
    logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram Application: %s", e)
    raise

# ======================= 6. –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å PDF =======================

def extract_pdf_elements(path: str):
    """
    –ß–µ—Ä–µ–∑ PyMuPDF (‚Äúfitz‚Äù) –¥–æ—Å—Ç–∞—ë–º –∏–∑ PDF:
      ‚Ä¢ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –±–ª–æ–∫–∏
      ‚Ä¢ –∫–∞—Ä—Ç–∏–Ω–∫–∏ (bytes)
    –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–∏—Å–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤–∏–¥–∞ [('text', —Å—Ç—Ä–æ–∫–∞), ('img', –±–∞–π—Ç—ã), ...]
    """
    doc = fitz.open(path)
    elements = []
    for page in doc:
        text_block = page.get_text().strip()
        if text_block:
            elements.append(("text", text_block))
        for img in page.get_images(full=True):
            xref = img[0]
            data = doc.extract_image(xref)["image"]
            elements.append(("img", data))
    doc.close()
    return elements

def convert_to_word(elements, out_path: str):
    """
    –ò–∑ —Å–ø–∏—Å–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ (text+img) —Å–æ–∑–¥–∞—ë–º .docx —Å –ø–æ–º–æ—â—å—é python-docx.
    """
    docx = Document()
    for typ, content in elements:
        if typ == "text":
            docx.add_paragraph(content)
        else:
            bio = io.BytesIO(content)
            bio.name = "image.png"
            docx.add_picture(bio)
    docx.save(out_path)

def save_text_to_txt(elements, out_path: str):
    """
    –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—Å–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –±–ª–æ–∫–∏ –≤ .txt, —Ä–∞–∑–¥–µ–ª—è—è –∏—Ö –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π.
    """
    with open(out_path, "w", encoding="utf-8") as f:
        for typ, content in elements:
            if typ == "text":
                f.write(content + "\n\n")

# ======================= 7. Telegram-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ =======================

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    /start ‚Äî –±–æ—Ç –∑–¥–æ—Ä–æ–≤–∞–µ—Ç—Å—è –∏ –ø—Ä–æ—Å–∏—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å PDF.
    """
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å PDF-—Ñ–∞–π–ª, –∏ —è –ø—Ä–µ–¥–ª–æ–∂—É –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏–∑–≤–ª–µ—á–µ–Ω–∏—è ‚Üì")

async def handle_pdf(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ö–æ–≥–¥–∞ –ø—Ä–∏—Ö–æ–¥–∏—Ç PDF:
      1) –°–∫–∞—á–∏–≤–∞–µ–º –µ–≥–æ –≤ /tmp/<file_unique_id>.pdf
      2) –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç+–∫–∞—Ä—Ç–∏–Ω–∫–∏ (—Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ context.user_data)
      3) –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏
    """
    logger.info("–ü–æ–ª—É—á–µ–Ω –¥–æ–∫—É–º–µ–Ω—Ç –æ—Ç %s", update.effective_user.id)
    doc = update.message.document
    if not doc or doc.mime_type != "application/pdf":
        return await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å PDF-—Ñ–∞–π–ª.")

    # 1) –°–∫–∞—á–∏–≤–∞–µ–º PDF –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    tgfile = await doc.get_file()
    local_path = f"/tmp/{doc.file_unique_id}.pdf"
    await tgfile.download_to_drive(local_path)
    context.user_data["pdf_path"] = local_path

    # 2) –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç+–∫–∞—Ä—Ç–∏–Ω–∫–∏ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Ö –≤ user_data
    elements = extract_pdf_elements(local_path)
    context.user_data["elements"] = elements

    # 3) –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏
    keyboard = [
        [InlineKeyboardButton("Word: —Ç–µ–∫—Å—Ç+–∫–∞—Ä—Ç–∏–Ω–∫–∏ üìÑ",      callback_data="cb_word_all")],
        [InlineKeyboardButton("TXT: —Ç–µ–∫—Å—Ç üìÑ",               callback_data="cb_txt")],
        [InlineKeyboardButton("Excel: —Ç–∞–±–ª–∏—Ü—ã üìä",            callback_data="cb_tables")],
        [InlineKeyboardButton("–ß–∞—Ç: —Ç–µ–∫—Å—Ç üìù",               callback_data="cb_text_only")],
        [InlineKeyboardButton("–ß–∞—Ç: —Ç–µ–∫—Å—Ç+–∫–∞—Ä—Ç–∏–Ω–∫–∏ üñºÔ∏èüìù",      callback_data="cb_chat_all")],
        [InlineKeyboardButton("–ù–æ–≤—ã–π PDF üîÑ",                callback_data="cb_new_pdf")],
    ]
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏, —á—Ç–æ —Å–¥–µ–ª–∞—Ç—å —Å —ç—Ç–∏–º PDF:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def cb_text_only(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    ¬´–ß–∞—Ç: —Ç–µ–∫—Å—Ç üìù¬ª ‚Äî –≤—ã–≤–æ–¥–∏–º –≤ —á–∞—Ç —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ–π), –±–µ–∑ –∫–Ω–æ–ø–æ–∫.
    """
    await update.callback_query.answer()
    path = context.user_data.get("pdf_path")
    if not path:
        return await context.bot.send_message(
            update.effective_chat.id,
            "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–∏—à–ª–∏ –Ω–æ–≤—ã–π PDF."
        )

    elements = extract_pdf_elements(path)
    text_blocks = [c for t, c in elements if t == "text"]
    if not text_blocks:
        return await context.bot.send_message(update.effective_chat.id, "–í PDF –Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞.")

    for block in text_blocks:
        for i in range(0, len(block), 4096):
            await context.bot.send_message(update.effective_chat.id, block[i:i+4096])
            await asyncio.sleep(0.05)

async def cb_chat_all(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    ¬´–ß–∞—Ç: —Ç–µ–∫—Å—Ç+–∫–∞—Ä—Ç–∏–Ω–∫–∏ üñºÔ∏èüìù¬ª ‚Äî –≤—ã–≤–æ–¥–∏–º –≤–µ—Å—å –∫–æ–Ω—Ç–µ–Ω—Ç –≤ —á–∞—Ç (—Ç–µ–∫—Å—Ç + –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è), –±–µ–∑ –∫–Ω–æ–ø–æ–∫.
    """
    await update.callback_query.answer()
    path = context.user_data.get("pdf_path")
    if not path:
        return await context.bot.send_message(
            update.effective_chat.id,
            "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–∏—à–ª–∏ –Ω–æ–≤—ã–π PDF."
        )

    elements = extract_pdf_elements(path)
    if not elements:
        return await context.bot.send_message(update.effective_chat.id, "–í PDF –Ω–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç–∞.")

    sent_images = set()
    for typ, content in elements:
        if typ == "text":
            for i in range(0, len(content), 4096):
                await context.bot.send_message(update.effective_chat.id, content[i:i+4096])
                await asyncio.sleep(0.05)
        else:
            h = hash(content)
            if h in sent_images:
                continue
            sent_images.add(h)
            bio = io.BytesIO(content)
            bio.name = "image.png"
            await context.bot.send_photo(update.effective_chat.id, photo=bio)
            await asyncio.sleep(0.1)

async def cb_word_all(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    ¬´Word: —Ç–µ–∫—Å—Ç+–∫–∞—Ä—Ç–∏–Ω–∫–∏ üìÑ¬ª ‚Äî —Å–æ–±–∏—Ä–∞–µ–º –≤—Å—ë –≤ –æ–¥–∏–Ω .docx –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º.
    """
    await update.callback_query.answer()
    path = context.user_data.get("pdf_path")
    if not path:
        return await context.bot.send_message(
            update.effective_chat.id,
            "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–∏—à–ª–∏ –Ω–æ–≤—ã–π PDF."
        )

    elements = extract_pdf_elements(path)
    if not elements:
        return await context.bot.send_message(update.effective_chat.id, "–í PDF –Ω–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç–∞.")

    out = f"/tmp/{update.effective_user.id}_full.docx"
    convert_to_word(elements, out)
    with open(out, "rb") as f:
        await context.bot.send_document(
            update.effective_chat.id,
            document=InputFile(f, filename="converted_full.docx")
        )

async def cb_txt(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    ¬´TXT: —Ç–µ–∫—Å—Ç üìÑ¬ª ‚Äî –∫–ª–∞–¥—ë–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç –≤ .txt –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º.
    """
    await update.callback_query.answer()
    path = context.user_data.get("pdf_path")
    if not path:
        return await context.bot.send_message(
            update.effective_chat.id,
            "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–∏—à–ª–∏ –Ω–æ–≤—ã–π PDF."
        )

    elements = extract_pdf_elements(path)
    text_blocks = [c for t, c in elements if t == "text"]
    if not text_blocks:
        return await context.bot.send_message(update.effective_chat.id, "–í PDF –Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞.")

    all_text = "\n\n".join(text_blocks)
    out_txt = f"/tmp/{update.effective_user.id}_all.txt"
    with open(out_txt, "w", encoding="utf-8") as f:
        f.write(all_text)

    with open(out_txt, "rb") as f:
        await context.bot.send_document(
            update.effective_chat.id,
            document=InputFile(f, filename="converted_text.txt")
        )

async def cb_tables(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    ¬´Excel: —Ç–∞–±–ª–∏—Ü—ã üìä¬ª ‚Äî –≤—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º —á–µ—Ä–µ–∑ pdfplumber –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã
    –∏ —Å–∫–ª–∞–¥—ã–≤–∞–µ–º –∏—Ö –≤ —Ä–∞–∑–Ω—ã–µ –ª–∏—Å—Ç—ã –æ–¥–Ω–æ–≥–æ .xlsx, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º.
    """
    await update.callback_query.answer()
    path = context.user_data.get("pdf_path")
    if not path:
        return await context.bot.send_message(
            update.effective_chat.id,
            "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–∏—à–ª–∏ –Ω–æ–≤—ã–π PDF."
        )

    all_tables = []
    with pdfplumber.open(path) as pdf:
        for page_num, page in enumerate(pdf.pages, start=1):
            tables = page.extract_tables()
            for tbl_idx, table in enumerate(tables, start=1):
                if not table or len(table) < 2:
                    continue
                df = pd.DataFrame(table[1:], columns=table[0])
                sheet_name = f"–°—Ç—Ä{page_num}_–¢–∞–±{tbl_idx}"
                all_tables.append((sheet_name[:31], df))

    if not all_tables:
        return await context.bot.send_message(update.effective_chat.id, "–í PDF –Ω–µ—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–µ–º—ã—Ö —Ç–∞–±–ª–∏—Ü.")

    excel_path = f"/tmp/{update.effective_user.id}_tables.xlsx"
    with pd.ExcelWriter(excel_path, engine="openpyxl") as writer:
        for sheet_name, df in all_tables:
            df.to_excel(writer, sheet_name=sheet_name, index=False)

    with open(excel_path, "rb") as f:
        await context.bot.send_document(
            update.effective_chat.id,
            document=InputFile(f, filename="converted_tables.xlsx")
        )

async def cb_new_pdf(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    ¬´–ù–æ–≤—ã–π PDF üîÑ¬ª ‚Äî –æ—á–∏—â–∞–µ–º context.user_data –∏ –ø—Ä–æ—Å–∏–º –ø—Ä–∏—Å–ª–∞—Ç—å –Ω–æ–≤—ã–π —Ñ–∞–π–ª.
    """
    await update.callback_query.answer()
    context.user_data.clear()
    await context.bot.send_message(update.effective_chat.id, "–û–∫–µ–π! –ü—Ä–∏—à–ª–∏ –Ω–æ–≤—ã–π PDF-—Ñ–∞–π–ª ‚Üí")

# ======================= 8. –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ö–µ–Ω–¥–ª–µ—Ä—ã =======================

telegram_app.add_handler(CommandHandler("start", start))
telegram_app.add_handler(MessageHandler(filters.Document.PDF, handle_pdf))
telegram_app.add_handler(CallbackQueryHandler(cb_text_only,   pattern="cb_text_only"))
telegram_app.add_handler(CallbackQueryHandler(cb_chat_all,    pattern="cb_chat_all"))
telegram_app.add_handler(CallbackQueryHandler(cb_word_all,    pattern="cb_word_all"))
telegram_app.add_handler(CallbackQueryHandler(cb_txt,         pattern="cb_txt"))
telegram_app.add_handler(CallbackQueryHandler(cb_tables,      pattern="cb_tables"))
telegram_app.add_handler(CallbackQueryHandler(cb_new_pdf,     pattern="cb_new_pdf"))

# ======================= 9. Flask-–º–∞—Ä—à—Ä—É—Ç—ã =======================

@app.route(f"/{TOKEN}", methods=["POST"])
def telegram_webhook():
    """
    –≠—Ç–æ—Ç –º–∞—Ä—à—Ä—É—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–∫–∞–∑–∞–Ω –≤ setWebhook. Telegram —à–ª—ë—Ç —Å—é–¥–∞ –≤—Å–µ Updates.
    –ú—ã –ø—Ä–æ—Å—Ç–æ —Å–æ–∑–¥–∞—ë–º –∑–∞–¥–∞—á—É –≤ –Ω–∞—à–µ–º –≥–ª–æ–±–∞–ª—å–Ω–æ–º telegram_loop –∏ —Å—Ä–∞–∑—É –≤–æ–∑–≤—Ä–∞—â–∞–µ–º "OK".
    """
    data = request.get_json(force=True)
    update = Update.de_json(data, telegram_app.bot)

    # –°—Ç–∞–≤–∏–º –∑–∞–¥–∞—á—É –≤ asyncio-loop –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:
    # (–Ω–∏–∫–∞–∫–∏—Ö get_event_loop() –≤–æ Flask-–ø–æ—Ç–æ–∫–µ, —Ç—É—Ç –ø—Ä–æ—Å—Ç–æ telegram_loop)
    asyncio.run_coroutine_threadsafe(
        telegram_app.process_update(update),
        telegram_loop
    )

    return "OK"

@app.route("/ping", methods=["GET"])
def ping():
    """
    –û—á–µ–Ω—å –ø—Ä–æ—Å—Ç–æ–π —ç–Ω–¥–ø–æ–π–Ω—Ç ‚Äúping‚Äù –¥–ª—è Render –∏–ª–∏ PingWin.
    –û–Ω –≤—Å–µ–≥–¥–∞ –≤–µ—Ä–Ω—ë—Ç ‚Äúpong‚Äù ‚Üí –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –±—É–¥–µ—Ç ¬´—É—Å—ã–ø–∞—Ç—å¬ª.
    """
    return "pong"

# ======================= 10. –ó–∞–ø—É—Å–∫ =======================

if __name__ == "__main__":
    # 10.1. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Webhook —É Telegram
    logger.info(f"Setting webhook to {WEBHOOK_URL}")
    resp = requests.post(
        f"https://api.telegram.org/bot{TOKEN}/setWebhook",
        data={"url": WEBHOOK_URL}
    )
    if not resp.ok:
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å webhook: %s", resp.text)
    else:
        logger.info("‚úî Webhook —É—Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è —É—Å–ø–µ—à–Ω–æ ‚Üí %s", WEBHOOK_URL)

    # 10.2. –ó–∞–ø—É—Å–∫–∞–µ–º Flask (–æ–Ω –æ–±—Å–ª—É–∂–∏–≤–∞–µ—Ç /ping –∏ /<TOKEN>)
    logger.info(f"–ó–∞–ø—É—Å–∫–∞–µ–º Flask –Ω–∞ –ø–æ—Ä—Ç—É {PORT}")
    app.run(host="0.0.0.0", port=PORT)
