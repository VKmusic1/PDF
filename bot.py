import os
import io
import logging
import asyncio
import fitz            # PyMuPDF
import pdfplumber
import pandas as pd
from flask import Flask, request
from telegram import Update, InputFile, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters
)
from docx import Document
import requests  # –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook

# ---------------------- 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è ----------------------
TOKEN = os.getenv("TOKEN")
if not TOKEN:
    raise RuntimeError("Environment variable TOKEN is required")

HOST = os.getenv("RENDER_EXTERNAL_HOSTNAME")
if not HOST:
    raise RuntimeError("Environment variable RENDER_EXTERNAL_HOSTNAME is required")

PORT = int(os.getenv("PORT", "10000"))
WEBHOOK_URL = f"https://{HOST}/{TOKEN}"

# ---------------------- 2. –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ----------------------
logging.basicConfig(format="%(asctime)s %(levelname)s: %(message)s", level=logging.INFO)
logger = logging.getLogger(__name__)

# ---------------------- 3. Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ ----------------------
app = Flask(__name__)

# ---------------------- 4. –°–æ–±–∏—Ä–∞–µ–º –µ–¥–∏–Ω—ã–π asyncio-loop ----------------------
# –≠—Ç–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, —á—Ç–æ–±—ã Telegram-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏ –≤–µ–±—Ö—É–∫ —Ä–∞–±–æ—Ç–∞–ª–∏ –≤ –æ–¥–Ω–æ–º loop-–µ,
# –∏–Ω–∞—á–µ –ø–æ–ª—É—á–∏–º ‚ÄúThere is no current event loop‚Äù –ø—Ä–∏ –∫–∞–∂–¥–æ–º POST.
loop = asyncio.new_event_loop()
asyncio.set_event_loop(loop)

# ---------------------- 5. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Telegram Application ----------------------
telegram_app = (
    Application.builder()
    .token(TOKEN)
    .connection_pool_size(100)
    .build()
)

# –£–≤–µ–ª–∏—á–∏–º —Ç–∞–π–º‚Äê–∞—É—Ç—ã –Ω–∞ —Å–ª—É—á–∞–π ‚Äú–¥–æ–ª–≥–æ–≥–æ‚Äù —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤
telegram_app.request_kwargs = {
    "read_timeout": 60,
    "connect_timeout": 20
}

# –ñ–¥—ë–º, –ø–æ–∫–∞ Telegram Application –∑–∞–≤–µ—Ä—à–∏—Ç –≤–Ω—É—Ç—Ä–µ–Ω–Ω—é—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
loop.run_until_complete(telegram_app.initialize())

# ---------------------- 6. PDF‚Äê—É—Ç–∏–ª–∏—Ç—ã ----------------------

def extract_pdf_elements(path: str):
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–∑ PDF (—á–µ—Ä–µ–∑ PyMuPDF) —Å–ø–∏—Å–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤:
      - ('text', <string —Å —Ç–µ–∫—Å—Ç–æ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã>)
      - ('img', <bytes –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è>)
    """
    doc = fitz.open(path)
    elements = []
    for page in doc:
        txt = page.get_text().strip()
        if txt:
            elements.append(("text", txt))
        for img in page.get_images(full=True):
            xref = img[0]
            data = doc.extract_image(xref)["image"]
            elements.append(("img", data))
    doc.close()
    return elements

def convert_to_word(elements, out_path: str):
    """
    –ü–æ–ª—É—á–∏–≤ —Å–ø–∏—Å–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ [('text', ...), ('img', ...), ...],
    —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Ö –≤ .docx: —Ç–µ–∫—Å—Ç‚Üí–∞–±–∑–∞—Ü—ã, –∫–∞—Ä—Ç–∏–Ω–∫–∏‚Üí–≤—Å—Ç–∞–≤–ª—è–µ—Ç.
    """
    docx = Document()
    for typ, content in elements:
        if typ == "text":
            docx.add_paragraph(content)
        else:
            bio = io.BytesIO(content)
            bio.name = "image.png"
            docx.add_picture(bio)
    docx.save(out_path)

def save_text_to_txt(elements, out_path: str):
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–∑ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç ('text', ...) –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç
    –≤ .txt, —Ä–∞–∑–¥–µ–ª—è—è –±–ª–æ–∫–∏ –¥–≤—É–º—è –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏ —Å—Ç—Ä–æ–∫–∏.
    """
    with open(out_path, "w", encoding="utf-8") as f:
        for typ, content in elements:
            if typ == "text":
                f.write(content + "\n\n")

# ---------------------- 7. Telegram‚Äê–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ----------------------

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    /start ‚Äî –∑–¥–æ—Ä–æ–≤–∞–µ–º—Å—è –∏ –ø—Ä–æ—Å–∏–º –ø—Ä–∏—Å–ª–∞—Ç—å PDF.
    """
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å PDF-—Ñ–∞–π–ª, –∏ —è –ø—Ä–µ–¥–ª–æ–∂—É –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏–∑–≤–ª–µ—á–µ–Ω–∏—è ‚Üí")

async def handle_pdf(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ü—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ PDF:
    1) –°–∫–∞—á–∏–≤–∞–µ–º –µ–≥–æ –≤ /tmp/<file_unique_id>.pdf
    2) –ò–∑–≤–ª–µ–∫–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã (text+img) –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ context.user_data
    3) –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–Ω—é –∫–Ω–æ–ø–æ–∫
    """
    logger.info("–ü–æ–ª—É—á–µ–Ω –¥–æ–∫—É–º–µ–Ω—Ç –æ—Ç %s", update.effective_user.id)
    doc = update.message.document
    if not doc or doc.mime_type != "application/pdf":
        return await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å –∏–º–µ–Ω–Ω–æ PDF-—Ñ–∞–π–ª.")

    # 1) —Å–∫–∞—á–∏–≤–∞–µ–º –≤–æ /tmp
    file = await doc.get_file()
    local_path = f"/tmp/{doc.file_unique_id}.pdf"
    await file.download_to_drive(local_path)
    context.user_data["pdf_path"] = local_path

    # 2) –≤—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º text+img —Å—Ä–∞–∑—É –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
    context.user_data["elements"] = extract_pdf_elements(local_path)

    # 3) –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    keyboard = [
        [InlineKeyboardButton("Word: —Ç–µ–∫—Å—Ç+–∫–∞—Ä—Ç–∏–Ω–∫–∏ üìÑ", callback_data="cb_word_all")],
        [InlineKeyboardButton("TXT: —Ç–µ–∫—Å—Ç üìÑ",            callback_data="cb_txt")],
        [InlineKeyboardButton("Excel: —Ç–∞–±–ª–∏—Ü—ã üìä",         callback_data="cb_tables")],
        [InlineKeyboardButton("–ß–∞—Ç: —Ç–µ–∫—Å—Ç üìù",            callback_data="cb_text_only")],
        [InlineKeyboardButton("–ß–∞—Ç: —Ç–µ–∫—Å—Ç+–∫–∞—Ä—Ç–∏–Ω–∫–∏ üñºÔ∏èüìù",  callback_data="cb_chat_all")],
        [InlineKeyboardButton("–ù–æ–≤—ã–π PDF üîÑ",              callback_data="cb_new_pdf")],
    ]
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏, —á—Ç–æ —Å–¥–µ–ª–∞—Ç—å —Å —ç—Ç–∏–º PDF:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def cb_text_only(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ü–æ –∫–Ω–æ–ø–∫–µ ‚Äú–ß–∞—Ç: —Ç–µ–∫—Å—Ç üìù‚Äù –ø—Ä–æ—Å—Ç–æ –≤—ã–≤–æ–¥–∏–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –±–ª–æ–∫–∏
    (—Å—Ç—Ä–æ–∫–∞ –∑–∞ —Å—Ç—Ä–æ–∫–æ–π, —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ–π), –±–µ–∑ –∫–Ω–æ–ø–æ–∫.
    """
    await update.callback_query.answer()
    path = context.user_data.get("pdf_path")
    if not path:
        return await update.callback_query.edit_message_text("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π PDF.")

    elements = extract_pdf_elements(path)
    text_blocks = [c for t, c in elements if t == "text"]
    if not text_blocks:
        return await context.bot.send_message(update.effective_chat.id, "–í PDF –Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞.")

    for block in text_blocks:
        for i in range(0, len(block), 4096):
            await context.bot.send_message(update.effective_chat.id, block[i:i+4096])
            await asyncio.sleep(0.05)

async def cb_chat_all(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ü–æ –∫–Ω–æ–ø–∫–µ ‚Äú–ß–∞—Ç: —Ç–µ–∫—Å—Ç+–∫–∞—Ä—Ç–∏–Ω–∫–∏ üñºÔ∏èüìù‚Äù –≤—ã–≤–æ–¥–∏–º —Å–Ω–∞—á–∞–ª–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –±–ª–æ–∫–∏,
    –ø–æ—Ç–æ–º –∫–∞—Ä—Ç–∏–Ω–∫–∏ (–≤ –ø–æ—Ä—è–¥–∫–µ –ø–æ—è–≤–ª–µ–Ω–∏—è), –±–µ–∑ –∫–Ω–æ–ø–æ–∫.
    """
    await update.callback_query.answer()
    path = context.user_data.get("pdf_path")
    if not path:
        return await update.callback_query.edit_message_text("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π PDF.")

    elements = extract_pdf_elements(path)
    if not elements:
        return await context.bot.send_message(update.effective_chat.id, "–í PDF –Ω–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç–∞.")

    sent_images = set()
    for typ, content in elements:
        if typ == "text":
            for i in range(0, len(content), 4096):
                await context.bot.send_message(update.effective_chat.id, content[i:i+4096])
                await asyncio.sleep(0.05)
        else:
            h = hash(content)
            if h in sent_images:
                continue
            sent_images.add(h)
            bio = io.BytesIO(content)
            bio.name = "image.png"
            await context.bot.send_photo(update.effective_chat.id, photo=bio)
            await asyncio.sleep(0.1)

async def cb_word_all(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ü–æ –∫–Ω–æ–ø–∫–µ ‚ÄúWord: —Ç–µ–∫—Å—Ç+–∫–∞—Ä—Ç–∏–Ω–∫–∏ üìÑ‚Äù —É–ø–∞–∫–æ–≤—ã–≤–∞–µ–º –≤–µ—Å—å PDF
    (text+img) –≤ –æ–¥–∏–Ω .docx –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º.
    """
    await update.callback_query.answer()
    path = context.user_data.get("pdf_path")
    if not path:
        return await context.bot.send_message(update.effective_chat.id, "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π PDF.")

    elements = extract_pdf_elements(path)
    if not elements:
        return await context.bot.send_message(update.effective_chat.id, "–í PDF –Ω–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç–∞.")

    out = f"/tmp/{update.effective_user.id}_full.docx"
    convert_to_word(elements, out)
    with open(out, "rb") as f:
        await context.bot.send_document(
            update.effective_chat.id,
            document=InputFile(f, filename="converted_full.docx")
        )

async def cb_txt(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ü–æ –∫–Ω–æ–ø–∫–µ ‚ÄúTXT: —Ç–µ–∫—Å—Ç üìÑ‚Äù —Å–æ–±–∏—Ä–∞–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç –≤ .txt –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º.
    """
    await update.callback_query.answer()
    path = context.user_data.get("pdf_path")
    if not path:
        return await context.bot.send_message(update.effective_chat.id, "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π PDF.")

    elements = extract_pdf_elements(path)
    text_blocks = [c for t, c in elements if t == "text"]
    if not text_blocks:
        return await context.bot.send_message(update.effective_chat.id, "–í PDF –Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞.")

    all_text = "\n\n".join(text_blocks)
    out_txt = f"/tmp/{update.effective_user.id}_all.txt"
    with open(out_txt, "w", encoding="utf-8") as f:
        f.write(all_text)

    with open(out_txt, "rb") as f:
        await context.bot.send_document(
            update.effective_chat.id,
            document=InputFile(f, filename="converted_text.txt")
        )

async def cb_tables(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ü–æ –∫–Ω–æ–ø–∫–µ ‚ÄúExcel: —Ç–∞–±–ª–∏—Ü—ã üìä‚Äù –∏–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã —á–µ—Ä–µ–∑ pdfplumber
    –∏ –∫–ª–∞–¥—ë–º –∏—Ö –≤ —Ä–∞–∑–Ω—ã–µ –ª–∏—Å—Ç—ã –æ–¥–Ω–æ–≥–æ .xlsx, –∑–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º.
    """
    await update.callback_query.answer()
    path = context.user_data.get("pdf_path")
    if not path:
        return await context.bot.send_message(update.effective_chat.id, "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π PDF.")

    all_tables = []
    with pdfplumber.open(path) as pdf:
        for page_num, page in enumerate(pdf.pages, start=1):
            tables = page.extract_tables()
            for tbl_idx, table in enumerate(tables, start=1):
                if not table or len(table) < 2:
                    continue
                df = pd.DataFrame(table[1:], columns=table[0])
                sheet_name = f"–°—Ç—Ä{page_num}_–¢–∞–±{tbl_idx}"
                all_tables.append((sheet_name[:31], df))

    if not all_tables:
        return await context.bot.send_message(update.effective_chat.id, "–í PDF –Ω–µ—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–µ–º—ã—Ö —Ç–∞–±–ª–∏—Ü.")

    excel_path = f"/tmp/{update.effective_user.id}_tables.xlsx"
    with pd.ExcelWriter(excel_path, engine="openpyxl") as writer:
        for sheet_name, df in all_tables:
            df.to_excel(writer, sheet_name=sheet_name, index=False)

    with open(excel_path, "rb") as f:
        await context.bot.send_document(
            update.effective_chat.id,
            document=InputFile(f, filename="converted_tables.xlsx")
        )

async def cb_new_pdf(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ü–æ –∫–Ω–æ–ø–∫–µ ‚Äú–ù–æ–≤—ã–π PDF üîÑ‚Äù –æ—á–∏—â–∞–µ–º user_data –∏ –ø—Ä–æ—Å–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –∑–∞–Ω–æ–≤–æ.
    """
    await update.callback_query.answer()
    context.user_data.clear()
    await context.bot.send_message(update.effective_chat.id, "–û–∫–µ–π! –ü—Ä–∏—à–ª–∏ –Ω–æ–≤—ã–π PDF-—Ñ–∞–π–ª ‚Üí")

# ---------------------- 8. –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤—Å–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã ----------------------
telegram_app.add_handler(CommandHandler("start", start))
telegram_app.add_handler(MessageHandler(filters.Document.PDF, handle_pdf))
telegram_app.add_handler(CallbackQueryHandler(cb_text_only,   pattern="cb_text_only"))
telegram_app.add_handler(CallbackQueryHandler(cb_chat_all,    pattern="cb_chat_all"))
telegram_app.add_handler(CallbackQueryHandler(cb_word_all,    pattern="cb_word_all"))
telegram_app.add_handler(CallbackQueryHandler(cb_txt,         pattern="cb_txt"))
telegram_app.add_handler(CallbackQueryHandler(cb_tables,      pattern="cb_tables"))
telegram_app.add_handler(CallbackQueryHandler(cb_new_pdf,     pattern="cb_new_pdf"))

# ---------------------- 9. Flask-–º–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è webhook –∏ ping ----------------------

@app.route(f"/{TOKEN}", methods=["POST"])
def telegram_webhook():
    """
    Telegram –±—É–¥–µ—Ç —Å–ª–∞—Ç—å —Å—é–¥–∞ –≤—Å–µ POST –ø—Ä–∏ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –±–æ—Çy.
    –ú—ã —Å—Ä–∞–∑—É –ø–µ—Ä–µ–¥–∞—ë–º Update –≤ –µ–¥–∏–Ω—ã–π asyncio‚Äêloop —á–µ—Ä–µ–∑ create_task(...)
    """
    data = request.get_json(force=True)
    update = Update.de_json(data, telegram_app.bot)
    loop.create_task(telegram_app.process_update(update))
    return "OK"

@app.route("/ping", methods=["GET"])
def ping():
    """
    –≠—Ç–æ—Ç –º–∞—Ä—à—Ä—É—Ç –º–æ–∂–Ω–æ –¥–µ—Ä–≥–∞—Ç—å –∫–∞–∂–¥—ã–µ 5‚Äì10 –º–∏–Ω—É—Ç (PingWin, Render, Postman –∏ —Ç.–ø.).
    –ï—Å–ª–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 'pong' ‚Äî –≤–∞—à —Å–µ—Ä–≤–∏—Å –Ω–µ —É—Å–Ω—É–ª.
    """
    return "pong"

# ---------------------- 10. –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫ ----------------------

if __name__ == "__main__":
    # 1) –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook –Ω–∞ –∞–¥—Ä–µ—Å https://<HOST>/<TOKEN>
    logger.info(f"Setting webhook to {WEBHOOK_URL}")
    resp = requests.post(
        f"https://api.telegram.org/bot{TOKEN}/setWebhook",
        data={"url": WEBHOOK_URL}
    )
    if not resp.ok:
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å webhook: %s", resp.text)
    else:
        logger.info("Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ.")

    # 2) –ó–∞–ø—É—Å–∫–∞–µ–º Flask (–æ–Ω —Å–ª—É—à–∞–µ—Ç –ø–æ—Ä—Ç—ã –¥–ª—è /ping –∏ /<TOKEN>)
    logger.info(f"–ó–∞–ø—É—Å–∫–∞–µ–º Flask –Ω–∞ –ø–æ—Ä—Ç—É {PORT}")
    app.run(host="0.0.0.0", port=PORT)
